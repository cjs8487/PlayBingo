// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Goal {
  id            String     @id @unique @default(cuid())
  goal          String
  description   String?
  oldCategories String[]
  categories    Category[] @relation("GoalCategories")
  difficulty    Int?
  game          Game       @relation(fields: [gameId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  gameId        String
}

model Category {
  id     String @id @unique @default(cuid())
  game   Game   @relation(fields: [gameId], references: [id])
  name   String
  goals  Goal[] @relation("GoalCategories")
  max    Int    @default(0)
  gameId String

  @@unique([gameId, name])
}

model Variant {
  id                String @id @unique @default(cuid())
  name              String
  description       String
  game              Game   @relation(fields: [gameId], references: [id])
  generatorSettings Json?
  gameId            String
  Room              Room[]
}

model Game {
  id                          String                        @id @unique @default(cuid())
  name                        String
  slug                        String                        @unique
  coverImage                  String?
  variants                    Variant[]
  goals                       Goal[]
  owners                      User[]                        @relation("GameOwners")
  moderators                  User[]                        @relation("GameModerators")
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  enableSRLv5                 Boolean                       @default(false)
  rooms                       Room[]
  racetimeCategory            String?
  racetimeGoal                String?
  racetimeBeta                Boolean                       @default(false)
  usersFavorited              User[]                        @relation("GameFavorites")
  difficultyVariantsEnabled   Boolean                       @default(false)
  difficultyVariants          DifficultyVariant[]
  difficultyGroups            Int?
  slugWords                   String[]                      @default([])
  useTypedRandom              Boolean                       @default(false)
  goalCategories              Category[]
  generationListMode          GenerationListMode[]          @default([])
  generationListTransform     GenerationListTransform       @default(NONE)
  generationBoardLayout       GenerationBoardLayout         @default(NONE)
  generationGoalSelection     GenerationGoalSelection       @default(RANDOM)
  generationGoalRestrictions  GenerationGoalRestriction[]   @default([])
  generationGlobalAdjustments GenerationGlobalAdjustments[] @default([])
  generatorSettings           Json                          @default("{}")
  newGeneratorBeta            Boolean                       @default(true)
  descriptionMd               String?
  setupMd                     String?
  linksMd                     String?
}

model DifficultyVariant {
  id          String  @id @unique @default(cuid())
  name        String
  goalAmounts Int[]
  game        Game?   @relation(fields: [gameId], references: [id])
  gameId      String?
}

model User {
  id             String         @id @unique @default(cuid())
  username       String         @unique
  email          String         @unique
  avatar         String?
  password       Bytes
  salt           Bytes
  connections    Connection[]
  staff          Boolean        @default(false)
  ownedGames     Game[]         @relation("GameOwners")
  moderatedGames Game[]         @relation("GameModerators")
  resetToken     PasswordReset?
  favoritedGames Game[]         @relation("GameFavorites")
  Player         Player[]
}

model PasswordReset {
  id      String   @id @unique @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  token   String   @unique
  expires DateTime
  userId  String   @unique
}

model Connection {
  id           String            @id @unique @default(cuid())
  service      ConnectionService
  serviceId    String
  refreshToken String?
  user         User              @relation(fields: [userId], references: [id])
  userId       String
}

model Room {
  id           String       @id @unique @default(cuid())
  slug         String       @unique
  name         String
  private      Boolean
  password     String?
  history      RoomAction[]
  game         Game?        @relation(fields: [gameId], references: [id])
  gameId       String?
  board        String[]
  racetimeRoom String?
  hideCard     Boolean      @default(false)
  bingoMode    BingoMode    @default(LINES)
  lineCount    Int          @default(1)
  players      Player[]
  variant      Variant?     @relation(fields: [variantId], references: [id])
  variantId    String?
}

model Player {
  id        String  @id @unique @default(cuid())
  key       String
  user      User?   @relation(fields: [userId], references: [id])
  room      Room    @relation(fields: [roomId], references: [id])
  nickname  String
  color     String  @default("blue")
  spectator Boolean
  monitor   Boolean @default(false)
  roomId    String
  userId    String?

  @@unique([key, roomId])
}

model RoomAction {
  id      String         @id @unique @default(cuid())
  room    Room           @relation(fields: [roomId], references: [id])
  action  RoomActionType
  payload Json
  roomId  String
}

model ApiToken {
  id        String    @id @unique @default(cuid())
  name      String    @unique
  token     String    @unique
  active    Boolean   @default(true)
  createdOn DateTime  @default(now())
  revokedOn DateTime?
}

enum RoomActionType {
  JOIN
  LEAVE
  MARK
  UNMARK
  CHAT
  CHANGECOLOR
}

enum ConnectionService {
  TWITCH
  DISCORD
  RACETIME
}

enum BingoMode {
  LINES
  BLACKOUT
  LOCKOUT
}

// board generation enums
enum GenerationListMode {
  NONE // placeholder until first mode is implemented
}

enum GenerationListTransform {
  NONE
}

enum GenerationBoardLayout {
  NONE
  SRLv5
  ISAAC
}

enum GenerationGoalSelection {
  RANDOM
  DIFFICULTY
}

enum GenerationGoalRestriction {
  LINE_TYPE_EXCLUSION // minimize type overlap between goals in same line
}

enum GenerationGlobalAdjustments {
  SYNERGIZE // add an additional copy of each goal sharing a type to increase final synergy
  BOARD_TYPE_MAX // enforce a maximum number of goals of a specific type in the board
}
