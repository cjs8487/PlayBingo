openapi: "3.0.3"
info:
  title: PlayBingo API
  version: "1.0"
servers:
  - url: https://playbingo.gg/api
tags:
  - name: rooms
    description: Creating, updating, and interacting with rooms
  - name: games
    description: Creating and managing games
components:
  securitySchemes:
    cookieAuthentication:
      description:
        Authentication is handled via session and cookies. Endpoints
        protected by this authentication method are only available to requests
        made by the website, unless they list another form of authorization. The
        value of the cookie indicates the server session of the currently logged
        in user, which is used to identify the user across page loads and
        multiple requests.
      type: apiKey
      in: cookie
      name: connect.sid
    apiKeyAuthentication:
      description: 
        Authentication is handled via a header. Endpoints protected with this
        authentication method are considered "private" and are not available for
        consumption by general consumers of the API. API keys can only be
        granted by site admins. Each API key uniquely represents an API consumer
        who has been granted access to these private endpoints
      type: apiKey
      in: header
      name: PlayBingo-Api-Key
  responses:
    errorBadRequest:
      description:
        "Bad Request: Required parameters, request body, or body contents are
        missing, malformed, or otherwise invalid, and the client should have
        been able to validate them as such."
    errorUnauthorized:
      description:
        "Unauthorized: The request failed to provide identification in a way the API
        server recognizes."
    errorForbidden:
      description:
        "Forbidden: The provided authorization does not have permission to
        perform the requested action"
    errorNotFound:
      description:
        "Not Found: The requested resource was not found"
    errorServer:
      description:
        "Internal Server Error: The server encountered an error unrelated to the
        contents of the request"
  schemas:
    user:
      type: object
      properties:
        id:
          type: string
          description:
            The user's database UUID
        username:
          type: string
          description:
            The user's name. Usernames are unique across all
            PlayBingo users
        racetimeConnected:
          type: boolean
          description:
            Flag indicating if the user has connected their account to
            racetime.gg in order to use the integration
        staff:
          type: boolean
          description:
            Flag indicating if the user is a member of the PlayBingo staff team,
            which grants them special permissions.
    roomData:
      type: object
      required:
        - name
        - game
        - slug
        - gameSlug
      properties:
        name:
          type: string
          description: The user given name of the room
        game:
          type: string
          description: The name of the game the room belongs to
        slug:
          type: string
          description:
            The unique identifier for th room, generated by the system
        gameSlug:
          type: string
          description:
            The unique identifier of the game, used to retrieve game resources
            from the server
        roomRacetimeConnection:
          $ref: "#/components/schemas/roomRacetimeConnection"
    roomRacetimeConnection:
      type: object
      required:
        - gameActive
      properties:
        gameActive:
          type: boolean
          description:
            Whether or not the game is enabled for racetime.gg integration and
            properly configured
        url:
          type: string
          description:
            Full url to the connected racetime room. If not set, the room is not
            connected to a racetime room
        websocketConnected:
          type: boolean
          description: 
            True if there is an active websocket connection to the room
        status:
          type: string
          description: Racetime room status
        startDelay:
          type: string
          description: 
            ISO 8601 duration string representing the amount of time between
            ready and start
        started:
          type: string
          description: ISO 8601 date when the race started
        ended:
          type: string
          description: ISO 8601 date when the race ended
    roomSocketAuthToken:
      type: string
      description:
        JWT representing authorization to access a specific room. Room
        authorization tokens encapsulate both the authorized user's identity
        within the room, as well as what permissions they have within the room.
    game:
      type: object
      description: Represents the high level information for a single bingo game
      required:
        - name
        - slug
        - owners
        - moderators
        - racetimeBeta
      properties:
        name:
          type: string
          description: The full name of the game
        slug:
          type: string
          description: The game's unique, short name used for URLs
        coverImage:
          type: string
          description:
            URL to the game's cover image displayed on the website. May link
            externally
        owners:
          type: array
          description: The owners of the game
          items:
            $ref: "#/components/schemas/user"
        moderators:
          type: array
          description: The moderators of the game
          items:
            $ref: "#/components/schemas/user"
        enableSRLv5:
          type: boolean
          description: If the game is enabled for SRLv5 board generation
        racetimeBeta:
          type: boolean
          description:
            \[TEMPORARY\] Flag indicating if the game has opted in to the
            racetime.gg integration beta program
        racetimeCategory:
          type: string
          description: The slug of the connected racetime category
        racetimeGoal:
          type: string
          description: The name of the connected racetime goal
        difficultyVariantsEnabled:
          type: boolean
          description: If the game has enabled difficulty variants
        difficultyVariants:
          type: array
          description: The game's configured difficulty variants
          items:
            $ref: "#/components/schemas/difficultyVariant"
        difficultyGroups:
          type: number
          description:
            The number of unique difficulty groups used in difficulty
            variant generation
        slugWords:
          type: array
          description:
            Custom slug words (typically nouns) used for room
            identifiers for this game
          items:
            type: string
        useTypedRandom:
          type: boolean
          description:
            If this game should consider goal types during
            generation, mimicking SRLv5's line logic
    goal:
      type: object
      description:
        Represents a single goal for a game.
      properties:
        id:
          type: string
          description: The goal's unique internal identifier
        goal:
          type: string
          description:
            The goals primary text. Typically a short blurb stating the object
            of the goal
        description:
          type: string
          description:
            Long form description of the goal. Usually used to explain
            additional, detailed information about the task and how to
            accomplish it
        difficulty:
          type: number
          description:
            Difficulty rating of the goal. Meaning depends on the generator the
            goal was designed for. For SRLv5, this is a number 1-25
        categories:
          type: array
          items:
            type: string
          description:
            List of category types that the goal belongs to. Used by generators
            to prevent overly-synergistic lines
    difficultyVariant:
      type: object
      properties:
        id:
          type: string
          description: The variant's unique internal identifier.
        name:
          type: string
          description: The name of the variant.
        goalAmounts:
          type: array
          description: The number of goals in each difficulty group to use during generation.
          items:
            type: number
paths:
  /me:
    get:
      summary: Get the currently logged in user
      security:
        - cookieAuthentication: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        401:
          $ref: "#/components/responses/errorUnauthorized"
        403:
          $ref: "#/components/responses/errorForbidden"
  /logout:
    post:
      summary: End the current login session
      description:
        Ends the login session of the currently logged in user.
      security:
        - cookieAuthentication: []
          apiKeyAuthentication: []
      responses:
        200:
          description: OK
        401:
          $ref: "#/components/responses/errorUnauthorized"
  /rooms:
    get:
      summary: Get a list of rooms
      description:
        Gets the list of rooms known to the server. By default, only
        active rooms are returned.
      tags: 
        - rooms
      parameters:
        - name: inactive
          in: query
          description: Optional - include inactive rooms in the returned list
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/roomData"
    post:
      summary: Create a new room
      description:
        Creates a new room, initializes it, generates a board, and authorizes
        the creator for access to the room. Returns the room's unique identifier
        and the creators authorization token which can be immediately used in a
        websocket connection.
      tags:
        - rooms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - game
                - nickname
                - password
              properties:
                name:
                  type: string
                  description: The name of the room
                game:
                  type: string
                  description: The slug of the game
                nickname:
                  type: string
                  description: The creator of the room's desired nickname
                password:
                  type: string
                  description: The room password
                generationMode:
                  type: string
                  description:
                    The board generation mode of the room. If not specified, the
                    default value depends on the games configuration. If it is
                    configured for SRLv5, generation will default to SRLv5.
                    Otherwise, the default generation mode is Random
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  slug:
                    type: string
                    description:
                      Unique identifier for the room, which can be used to
                      construct the URL to the room
                  authToken:
                    $ref: "#/components/schemas/roomSocketAuthToken"
                  
        400:
          $ref: "#/components/responses/errorBadRequest"
        404:
          $ref: "#/components/responses/errorNotFound"
  /rooms/{slug}:
    get:
      tags:
      - rooms
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      summary: Get data for a room
      description:
        Gets the room data for the specified room. This will cause the server
        to flag an inactive room as active, unless the room is closed.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/roomData"
        404:
          $ref: "#/components/responses/errorNotFound"
  /rooms/{slug}/authorize:
    post:
      tags:
      - rooms
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      summary: Get an authorization token for a room
      description:
        Creates an authorization session with the websocket server for the
        specified room.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description:
                    The room password. Required for rooms that are password
                    protected, unless the logged in user has special
                    authorization for the game.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  authToken:
                    $ref: "#/components/schemas/roomSocketAuthToken"
        403:
          $ref: "#/components/responses/errorForbidden"
        404:
          $ref: "#/components/responses/errorNotFound"
  /games:
    get:
      summary: Get all games
      description: Gets the full list of games.
      tags:
      - games
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/game"
    post:
      summary: Create a new game
      description:
        Creates a new game from the specified data. Requires a login session,
        and can only be called from the website. The user in the login session
        will be made the owner of the game.
      tags:
        - games
      security:
        - cookieAuthentication: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - slug
              properties:
                name:
                  type: string
                  description: The name of the new game
                slug:
                  type: string
                  description: The slug of the new game
                coverImage:
                  type: string
                  description: Link to the cover image of the new game
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/game"
        400:
          $ref: "#/components/responses/errorBadRequest"
        401:
          $ref: "#/components/responses/errorUnauthorized"
        500:
          $ref: "#/components/responses/errorServer"
  /games/{slug}:
    get:
      summary: Get a single game
      description: Gets data for a single game
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/game"
        404:
          $ref: "#/components/responses/errorNotFound"
    post:
      summary: Update a game
      description:
        Update the data for an existing game
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
      security:
        - cookieAuthentication: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/game"
        400:
          $ref: "#/components/responses/errorBadRequest"
    delete:
      summary: Delete a game
      description: Deletes the game identified by the provided slug.
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the game.
      responses:
        200:
          description: OK
        401:
          $ref: "#/components/responses/errorUnauthorized"
        403:
          $ref: "#/components/responses/errorForbidden"
  /games/{slug}/goals:
    get:
      summary: Get goals for a game
      description:
        Get the list of all goals for a game
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/goal"
    post:
      summary: Create a new goal
      description:
        Creates a new goal belonging to the specified game
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/goal"
        400:
          $ref: "#/components/responses/errorBadRequest"
  /games/{slug}/eligibleMods:
    get:
      summary: Get eligible moderators
      description: Returns the list of users eligible to be a moderator or owner of the game.
      tags:
          - games
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the game.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"

  /games/{slug}/owners:
    post:
      summary: Add game owners
      description: Adds new owners to the game.
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the game.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - users
              properties:
                users:
                  type: array
                  items:
                    type: string
                  description: List of user IDs to add as owners.
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/errorBadRequest"
        401:
          $ref: "#/components/responses/errorUnauthorized"
        403:
          $ref: "#/components/responses/errorForbidden"

    delete:
      summary: Remove game owners
      description:
        Removes the specified owner from the game. A game must always have at
        least one owner, and the last remaining owner cannot be removed with
        this endpoint.
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the game.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user
              properties:
                user:
                  type: string
                  description: The user ID to remove as an owner.
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/errorBadRequest"
        401:
          $ref: "#/components/responses/errorUnauthorized"
        403:
          $ref: "#/components/responses/errorForbidden"
        404:
          $ref: "#/components/responses/errorNotFound"

  /games/{slug}/moderators:
    post:
      summary: Add game moderators
      description: Adds new moderators to the game.
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the game.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - users
              properties:
                users:
                  type: array
                  items:
                    type: string
                  description: List of user IDs to add as moderators.
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/errorBadRequest"
        401:
          $ref: "#/components/responses/errorUnauthorized"
        403:
          $ref: "#/components/responses/errorForbidden"

    delete:
      summary: Remove game moderators
      description: Removes the specified moderator from the game.
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the game.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user
              properties:
                user:
                  type: string
                  description: The user ID to remove as a moderator.
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/errorBadRequest"
        401:
          $ref: "#/components/responses/errorUnauthorized"
        403:
          $ref: "#/components/responses/errorForbidden"
        404:
          $ref: "#/components/responses/errorNotFound"

  /games/{slug}/permissions:
    get:
      summary: Get user permissions
      description: Determines the currently logged-in user's permissions for the game.
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the game.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  isOwner:
                    type: boolean
                    description: Whether the user is an owner of the game.
                  canModerate:
                    type: boolean
                    description: Whether the user can moderate the game.
        401:
          $ref: "#/components/responses/errorUnauthorized"

  /games/{slug}/deleteAllGoals:
    delete:
      summary: Delete all game goals
      description: Deletes all goals for the game.
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the game.
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/errorBadRequest"
        401:
          $ref: "#/components/responses/errorUnauthorized"
        403:
          $ref: "#/components/responses/errorForbidden"
        500:
          $ref: "#/components/responses/errorServer"
  /games/{slug}/favorite:
    post:
      summary: Favorite a game
      description:
        Adds the game to the favorites of the currently logged-in user.
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the game.
      responses:
        200:
          description: OK
        401:
          $ref: "#/components/responses/errorUnauthorized"
    delete:
      summary: Unfavorite a game
      description:
        Removes the game from the favorites of the currently logged-in user.
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the game.
      responses:
        200:
          description: OK
        401:
          $ref: "#/components/responses/errorUnauthorized"
  /games/{slug}/difficultyVariants:
    post:
      summary: Create a difficulty variant
      description: Creates a new difficulty variant for the game.
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the game.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - goalAmounts
              properties:
                name:
                  type: string
                  description: The name of the difficulty variant.
                goalAmounts:
                  type: array
                  items:
                    type: number
                  description: The number of goals in each difficulty group.
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/errorBadRequest"
        401:
          $ref: "#/components/responses/errorUnauthorized"
        403:
          $ref: "#/components/responses/errorForbidden"

  /games/{slug}/difficultyVariants/{id}:
    post:
      summary: Update a difficulty variant
      description: Updates the specified difficulty variant for the game.
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the game.
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the difficulty variant.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - goalAmounts
              properties:
                name:
                  type: string
                  description: The name of the difficulty variant.
                goalAmounts:
                  type: array
                  items:
                    type: number
                  description: The number of goals in each difficulty group.
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/errorBadRequest"
        401:
          $ref: "#/components/responses/errorUnauthorized"
        403:
          $ref: "#/components/responses/errorForbidden"

    delete:
      summary: Delete a difficulty variant
      description: Deletes the specified difficulty variant from the game.
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the game.
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the difficulty variant.
      responses:
        200:
          description: OK
        401:
          $ref: "#/components/responses/errorUnauthorized"
        403:
          $ref: "#/components/responses/errorForbidden"
  /games/{slug}/categories:
    get:
      summary: Get game categories
      description: Retrieves the list of categories for the game.
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the game.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The unique identifier for the category.
                    name:
                      type: string
                      description: The name of the category.
                    max:
                      type: integer
                      description: The maximum number of goals allowed in the category.
                    goalCount:
                      type: integer
                      description: The number of goals in the category.
        401:
          $ref: "#/components/responses/errorUnauthorized"

    post:
      summary: Create a category
      description: Creates a new category for the game.
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the game.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: The name of the category.
                max:
                  type: integer
                  description: The maximum number of goals allowed in the category.
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/errorBadRequest"
        401:
          $ref: "#/components/responses/errorUnauthorized"
        403:
          $ref: "#/components/responses/errorForbidden"