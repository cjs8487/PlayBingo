/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * An incoming websocket message from the server telling the client of a change in room state or instructing it to take an action
 */
export type ServerMessage = (
  | {
      action: "chat";
      message: ChatMessage;
    }
  | {
      action: "cellUpdate";
      row: number;
      col: number;
      cell: Cell;
    }
  | {
      action: "syncBoard";
      board: Board;
    }
  | {
      action: "connected";
      board: Board;
      chatHistory: ChatMessage[];
      roomData?: RoomData;
    }
  | {
      action: "unauthorized";
    }
  | {
      action: "disconnected";
    }
  | {
      action: "updateRoomData";
      roomData: RoomData;
    }
  | {
      action: "syncRaceData";
      players: Player[];
      racetimeConnection: RacetimeConnection;
    }
  | {
      action: "forbidden";
    }
  | {
      action: "reauthenticate";
      authToken: string;
    }
) & {
  players?: Player[];
  connectedPlayer?: Player;
};
export type ChatMessage = (
  | string
  | {
      contents: string;
      color: string;
    }
)[];
export type Cell = RevealedCell | HiddenCell;
export type Board = RevealedBoard | HiddenBoard;

export interface RevealedCell {
  goal: Goal;
  completedPlayers: string[];
  revealed: true;
}
/**
 * A single objective for a bingo game.
 */
export interface Goal {
  id: string;
  goal: string;
  description: string | null;
  difficulty?: number | null;
  categories?: string[];
}
export interface HiddenCell {
  revealed: false;
  completedPlayers: string[];
}
export interface RevealedBoard {
  board: Cell[][];
  hidden?: false;
}
export interface HiddenBoard {
  hidden: true;
}
/**
 * Basic information about a room
 */
export interface RoomData {
  name: string;
  game: string;
  slug: string;
  gameSlug: string;
  racetimeConnection?: RacetimeConnection;
  newGenerator: boolean;
  /**
   * The auto-authentication token generated for the logged in user.
   */
  token?: string;
}
export interface RacetimeConnection {
  /**
   * Whether or not the game is enabled for racetime.gg integration and properly configured
   */
  gameActive?: boolean;
  /**
   * Full url to the connected racetime room. If not set, the room is not connected to a racetime room
   */
  url?: string;
  /**
   * True if there is an active websocket connection to the room
   */
  websocketConnected?: boolean;
  /**
   * Racetime room status
   */
  status?: string;
  /**
   * ISO 8601 duration string representing the amount of time between ready and start
   */
  startDelay?: string;
  /**
   * ISO 8601 date when the race started
   */
  started?: string;
  /**
   * ISO 8601 date when the race ended
   */
  ended?: string;
}
export interface Player {
  id: string;
  nickname: string;
  color: string;
  goalCount: number;
  raceStatus: RaceStatusDisconnected | RaceStatusConnected;
  spectator: boolean;
  monitor: boolean;
  showInRoom: boolean;
}
export interface RaceStatusDisconnected {
  connected: false;
}
export interface RaceStatusConnected {
  connected: true;
  /**
   * Username connected to this player for the race, if it is separate from PlayBingo
   */
  username: string;
  ready?: boolean;
  /**
   * Race finish time (ISO 8601 duration)
   */
  finishTime?: string;
}
